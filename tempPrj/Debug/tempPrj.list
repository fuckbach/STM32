
tempPrj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000004e4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800066c  0800066c  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  0800066c  0800066c  0001066c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000670  08000670  00010670  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000018  20000000  08000674  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020018  2**0
                  CONTENTS
  7 .bss          00000020  20000018  20000018  00020018  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20000038  20000038  00020018  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 10 .debug_line   0000042e  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000009c4  00000000  00000000  00020476  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .comment      0000007c  00000000  00000000  00020e3a  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001006  00000000  00000000  00020eb6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 0000032f  00000000  00000000  00021ebc  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000068  00000000  00000000  000221f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000001a0  00000000  00000000  00022258  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000020  00000000  00000000  000223f8  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000018 	.word	0x20000018
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000650 	.word	0x08000650

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000001c 	.word	0x2000001c
 80001c4:	08000650 	.word	0x08000650

080001c8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80001cc:	4a16      	ldr	r2, [pc, #88]	; (8000228 <SystemInit+0x60>)
 80001ce:	4b16      	ldr	r3, [pc, #88]	; (8000228 <SystemInit+0x60>)
 80001d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80001d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80001d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80001dc:	4a13      	ldr	r2, [pc, #76]	; (800022c <SystemInit+0x64>)
 80001de:	4b13      	ldr	r3, [pc, #76]	; (800022c <SystemInit+0x64>)
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	f043 0301 	orr.w	r3, r3, #1
 80001e6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80001e8:	4b10      	ldr	r3, [pc, #64]	; (800022c <SystemInit+0x64>)
 80001ea:	2200      	movs	r2, #0
 80001ec:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80001ee:	4a0f      	ldr	r2, [pc, #60]	; (800022c <SystemInit+0x64>)
 80001f0:	4b0e      	ldr	r3, [pc, #56]	; (800022c <SystemInit+0x64>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80001f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80001fc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80001fe:	4b0b      	ldr	r3, [pc, #44]	; (800022c <SystemInit+0x64>)
 8000200:	4a0b      	ldr	r2, [pc, #44]	; (8000230 <SystemInit+0x68>)
 8000202:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000204:	4a09      	ldr	r2, [pc, #36]	; (800022c <SystemInit+0x64>)
 8000206:	4b09      	ldr	r3, [pc, #36]	; (800022c <SystemInit+0x64>)
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800020e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000210:	4b06      	ldr	r3, [pc, #24]	; (800022c <SystemInit+0x64>)
 8000212:	2200      	movs	r2, #0
 8000214:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000216:	f000 f889 	bl	800032c <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800021a:	4b03      	ldr	r3, [pc, #12]	; (8000228 <SystemInit+0x60>)
 800021c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000220:	609a      	str	r2, [r3, #8]
#endif
}
 8000222:	bf00      	nop
 8000224:	bd80      	pop	{r7, pc}
 8000226:	bf00      	nop
 8000228:	e000ed00 	.word	0xe000ed00
 800022c:	40023800 	.word	0x40023800
 8000230:	24003010 	.word	0x24003010

08000234 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000234:	b480      	push	{r7}
 8000236:	b087      	sub	sp, #28
 8000238:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 800023a:	2300      	movs	r3, #0
 800023c:	613b      	str	r3, [r7, #16]
 800023e:	2300      	movs	r3, #0
 8000240:	617b      	str	r3, [r7, #20]
 8000242:	2302      	movs	r3, #2
 8000244:	60fb      	str	r3, [r7, #12]
 8000246:	2300      	movs	r3, #0
 8000248:	60bb      	str	r3, [r7, #8]
 800024a:	2302      	movs	r3, #2
 800024c:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800024e:	4b32      	ldr	r3, [pc, #200]	; (8000318 <SystemCoreClockUpdate+0xe4>)
 8000250:	689b      	ldr	r3, [r3, #8]
 8000252:	f003 030c 	and.w	r3, r3, #12
 8000256:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8000258:	693b      	ldr	r3, [r7, #16]
 800025a:	2b04      	cmp	r3, #4
 800025c:	d007      	beq.n	800026e <SystemCoreClockUpdate+0x3a>
 800025e:	2b08      	cmp	r3, #8
 8000260:	d009      	beq.n	8000276 <SystemCoreClockUpdate+0x42>
 8000262:	2b00      	cmp	r3, #0
 8000264:	d13d      	bne.n	80002e2 <SystemCoreClockUpdate+0xae>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8000266:	4b2d      	ldr	r3, [pc, #180]	; (800031c <SystemCoreClockUpdate+0xe8>)
 8000268:	4a2d      	ldr	r2, [pc, #180]	; (8000320 <SystemCoreClockUpdate+0xec>)
 800026a:	601a      	str	r2, [r3, #0]
      break;
 800026c:	e03d      	b.n	80002ea <SystemCoreClockUpdate+0xb6>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 800026e:	4b2b      	ldr	r3, [pc, #172]	; (800031c <SystemCoreClockUpdate+0xe8>)
 8000270:	4a2c      	ldr	r2, [pc, #176]	; (8000324 <SystemCoreClockUpdate+0xf0>)
 8000272:	601a      	str	r2, [r3, #0]
      break;
 8000274:	e039      	b.n	80002ea <SystemCoreClockUpdate+0xb6>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000276:	4b28      	ldr	r3, [pc, #160]	; (8000318 <SystemCoreClockUpdate+0xe4>)
 8000278:	685b      	ldr	r3, [r3, #4]
 800027a:	0d9b      	lsrs	r3, r3, #22
 800027c:	f003 0301 	and.w	r3, r3, #1
 8000280:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000282:	4b25      	ldr	r3, [pc, #148]	; (8000318 <SystemCoreClockUpdate+0xe4>)
 8000284:	685b      	ldr	r3, [r3, #4]
 8000286:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800028a:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 800028c:	68bb      	ldr	r3, [r7, #8]
 800028e:	2b00      	cmp	r3, #0
 8000290:	d00c      	beq.n	80002ac <SystemCoreClockUpdate+0x78>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000292:	4a24      	ldr	r2, [pc, #144]	; (8000324 <SystemCoreClockUpdate+0xf0>)
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	fbb2 f3f3 	udiv	r3, r2, r3
 800029a:	4a1f      	ldr	r2, [pc, #124]	; (8000318 <SystemCoreClockUpdate+0xe4>)
 800029c:	6852      	ldr	r2, [r2, #4]
 800029e:	0992      	lsrs	r2, r2, #6
 80002a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80002a4:	fb02 f303 	mul.w	r3, r2, r3
 80002a8:	617b      	str	r3, [r7, #20]
 80002aa:	e00b      	b.n	80002c4 <SystemCoreClockUpdate+0x90>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80002ac:	4a1c      	ldr	r2, [pc, #112]	; (8000320 <SystemCoreClockUpdate+0xec>)
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80002b4:	4a18      	ldr	r2, [pc, #96]	; (8000318 <SystemCoreClockUpdate+0xe4>)
 80002b6:	6852      	ldr	r2, [r2, #4]
 80002b8:	0992      	lsrs	r2, r2, #6
 80002ba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80002be:	fb02 f303 	mul.w	r3, r2, r3
 80002c2:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80002c4:	4b14      	ldr	r3, [pc, #80]	; (8000318 <SystemCoreClockUpdate+0xe4>)
 80002c6:	685b      	ldr	r3, [r3, #4]
 80002c8:	0c1b      	lsrs	r3, r3, #16
 80002ca:	f003 0303 	and.w	r3, r3, #3
 80002ce:	3301      	adds	r3, #1
 80002d0:	005b      	lsls	r3, r3, #1
 80002d2:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 80002d4:	697a      	ldr	r2, [r7, #20]
 80002d6:	68fb      	ldr	r3, [r7, #12]
 80002d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80002dc:	4a0f      	ldr	r2, [pc, #60]	; (800031c <SystemCoreClockUpdate+0xe8>)
 80002de:	6013      	str	r3, [r2, #0]
      break;
 80002e0:	e003      	b.n	80002ea <SystemCoreClockUpdate+0xb6>
    default:
      SystemCoreClock = HSI_VALUE;
 80002e2:	4b0e      	ldr	r3, [pc, #56]	; (800031c <SystemCoreClockUpdate+0xe8>)
 80002e4:	4a0e      	ldr	r2, [pc, #56]	; (8000320 <SystemCoreClockUpdate+0xec>)
 80002e6:	601a      	str	r2, [r3, #0]
      break;
 80002e8:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80002ea:	4b0b      	ldr	r3, [pc, #44]	; (8000318 <SystemCoreClockUpdate+0xe4>)
 80002ec:	689b      	ldr	r3, [r3, #8]
 80002ee:	091b      	lsrs	r3, r3, #4
 80002f0:	f003 030f 	and.w	r3, r3, #15
 80002f4:	4a0c      	ldr	r2, [pc, #48]	; (8000328 <SystemCoreClockUpdate+0xf4>)
 80002f6:	5cd3      	ldrb	r3, [r2, r3]
 80002f8:	b2db      	uxtb	r3, r3
 80002fa:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 80002fc:	4b07      	ldr	r3, [pc, #28]	; (800031c <SystemCoreClockUpdate+0xe8>)
 80002fe:	681a      	ldr	r2, [r3, #0]
 8000300:	693b      	ldr	r3, [r7, #16]
 8000302:	fa22 f303 	lsr.w	r3, r2, r3
 8000306:	4a05      	ldr	r2, [pc, #20]	; (800031c <SystemCoreClockUpdate+0xe8>)
 8000308:	6013      	str	r3, [r2, #0]
}
 800030a:	bf00      	nop
 800030c:	371c      	adds	r7, #28
 800030e:	46bd      	mov	sp, r7
 8000310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000314:	4770      	bx	lr
 8000316:	bf00      	nop
 8000318:	40023800 	.word	0x40023800
 800031c:	20000004 	.word	0x20000004
 8000320:	00f42400 	.word	0x00f42400
 8000324:	007a1200 	.word	0x007a1200
 8000328:	20000008 	.word	0x20000008

0800032c <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 800032c:	b480      	push	{r7}
 800032e:	b083      	sub	sp, #12
 8000330:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000332:	2300      	movs	r3, #0
 8000334:	607b      	str	r3, [r7, #4]
 8000336:	2300      	movs	r3, #0
 8000338:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800033a:	4a36      	ldr	r2, [pc, #216]	; (8000414 <SetSysClock+0xe8>)
 800033c:	4b35      	ldr	r3, [pc, #212]	; (8000414 <SetSysClock+0xe8>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000344:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000346:	4b33      	ldr	r3, [pc, #204]	; (8000414 <SetSysClock+0xe8>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800034e:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	3301      	adds	r3, #1
 8000354:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000356:	683b      	ldr	r3, [r7, #0]
 8000358:	2b00      	cmp	r3, #0
 800035a:	d103      	bne.n	8000364 <SetSysClock+0x38>
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8000362:	d1f0      	bne.n	8000346 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000364:	4b2b      	ldr	r3, [pc, #172]	; (8000414 <SetSysClock+0xe8>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800036c:	2b00      	cmp	r3, #0
 800036e:	d002      	beq.n	8000376 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000370:	2301      	movs	r3, #1
 8000372:	603b      	str	r3, [r7, #0]
 8000374:	e001      	b.n	800037a <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000376:	2300      	movs	r3, #0
 8000378:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 800037a:	683b      	ldr	r3, [r7, #0]
 800037c:	2b01      	cmp	r3, #1
 800037e:	d142      	bne.n	8000406 <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000380:	4a24      	ldr	r2, [pc, #144]	; (8000414 <SetSysClock+0xe8>)
 8000382:	4b24      	ldr	r3, [pc, #144]	; (8000414 <SetSysClock+0xe8>)
 8000384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000386:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800038a:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 800038c:	4a22      	ldr	r2, [pc, #136]	; (8000418 <SetSysClock+0xec>)
 800038e:	4b22      	ldr	r3, [pc, #136]	; (8000418 <SetSysClock+0xec>)
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000396:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000398:	4a1e      	ldr	r2, [pc, #120]	; (8000414 <SetSysClock+0xe8>)
 800039a:	4b1e      	ldr	r3, [pc, #120]	; (8000414 <SetSysClock+0xe8>)
 800039c:	689b      	ldr	r3, [r3, #8]
 800039e:	6093      	str	r3, [r2, #8]

#if defined (STM32F40_41xxx) || defined (STM32F427_437xx) || defined (STM32F429_439xx)      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80003a0:	4a1c      	ldr	r2, [pc, #112]	; (8000414 <SetSysClock+0xe8>)
 80003a2:	4b1c      	ldr	r3, [pc, #112]	; (8000414 <SetSysClock+0xe8>)
 80003a4:	689b      	ldr	r3, [r3, #8]
 80003a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80003aa:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80003ac:	4a19      	ldr	r2, [pc, #100]	; (8000414 <SetSysClock+0xe8>)
 80003ae:	4b19      	ldr	r3, [pc, #100]	; (8000414 <SetSysClock+0xe8>)
 80003b0:	689b      	ldr	r3, [r3, #8]
 80003b2:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80003b6:	6093      	str	r3, [r2, #8]
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
#endif /* STM32F401xx */
   
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80003b8:	4b16      	ldr	r3, [pc, #88]	; (8000414 <SetSysClock+0xe8>)
 80003ba:	4a18      	ldr	r2, [pc, #96]	; (800041c <SetSysClock+0xf0>)
 80003bc:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80003be:	4a15      	ldr	r2, [pc, #84]	; (8000414 <SetSysClock+0xe8>)
 80003c0:	4b14      	ldr	r3, [pc, #80]	; (8000414 <SetSysClock+0xe8>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80003c8:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80003ca:	bf00      	nop
 80003cc:	4b11      	ldr	r3, [pc, #68]	; (8000414 <SetSysClock+0xe8>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d0f9      	beq.n	80003cc <SetSysClock+0xa0>
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
#endif /* STM32F427_437x || STM32F429_439xx  */

#if defined (STM32F40_41xxx)     
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 80003d8:	4b11      	ldr	r3, [pc, #68]	; (8000420 <SetSysClock+0xf4>)
 80003da:	f240 7205 	movw	r2, #1797	; 0x705
 80003de:	601a      	str	r2, [r3, #0]
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
#endif /* STM32F401xx */

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80003e0:	4a0c      	ldr	r2, [pc, #48]	; (8000414 <SetSysClock+0xe8>)
 80003e2:	4b0c      	ldr	r3, [pc, #48]	; (8000414 <SetSysClock+0xe8>)
 80003e4:	689b      	ldr	r3, [r3, #8]
 80003e6:	f023 0303 	bic.w	r3, r3, #3
 80003ea:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 80003ec:	4a09      	ldr	r2, [pc, #36]	; (8000414 <SetSysClock+0xe8>)
 80003ee:	4b09      	ldr	r3, [pc, #36]	; (8000414 <SetSysClock+0xe8>)
 80003f0:	689b      	ldr	r3, [r3, #8]
 80003f2:	f043 0302 	orr.w	r3, r3, #2
 80003f6:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 80003f8:	bf00      	nop
 80003fa:	4b06      	ldr	r3, [pc, #24]	; (8000414 <SetSysClock+0xe8>)
 80003fc:	689b      	ldr	r3, [r3, #8]
 80003fe:	f003 030c 	and.w	r3, r3, #12
 8000402:	2b08      	cmp	r3, #8
 8000404:	d1f9      	bne.n	80003fa <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8000406:	bf00      	nop
 8000408:	370c      	adds	r7, #12
 800040a:	46bd      	mov	sp, r7
 800040c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000410:	4770      	bx	lr
 8000412:	bf00      	nop
 8000414:	40023800 	.word	0x40023800
 8000418:	40007000 	.word	0x40007000
 800041c:	07405419 	.word	0x07405419
 8000420:	40023c00 	.word	0x40023c00

08000424 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000424:	b480      	push	{r7}
 8000426:	b083      	sub	sp, #12
 8000428:	af00      	add	r7, sp, #0
 800042a:	4603      	mov	r3, r0
 800042c:	6039      	str	r1, [r7, #0]
 800042e:	71fb      	strb	r3, [r7, #7]
  if((int32_t)IRQn < 0) {
 8000430:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000434:	2b00      	cmp	r3, #0
 8000436:	da0b      	bge.n	8000450 <NVIC_SetPriority+0x2c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000438:	490d      	ldr	r1, [pc, #52]	; (8000470 <NVIC_SetPriority+0x4c>)
 800043a:	79fb      	ldrb	r3, [r7, #7]
 800043c:	f003 030f 	and.w	r3, r3, #15
 8000440:	3b04      	subs	r3, #4
 8000442:	683a      	ldr	r2, [r7, #0]
 8000444:	b2d2      	uxtb	r2, r2
 8000446:	0112      	lsls	r2, r2, #4
 8000448:	b2d2      	uxtb	r2, r2
 800044a:	440b      	add	r3, r1
 800044c:	761a      	strb	r2, [r3, #24]
  }
  else {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800044e:	e009      	b.n	8000464 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000450:	4908      	ldr	r1, [pc, #32]	; (8000474 <NVIC_SetPriority+0x50>)
 8000452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000456:	683a      	ldr	r2, [r7, #0]
 8000458:	b2d2      	uxtb	r2, r2
 800045a:	0112      	lsls	r2, r2, #4
 800045c:	b2d2      	uxtb	r2, r2
 800045e:	440b      	add	r3, r1
 8000460:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000464:	bf00      	nop
 8000466:	370c      	adds	r7, #12
 8000468:	46bd      	mov	sp, r7
 800046a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046e:	4770      	bx	lr
 8000470:	e000ed00 	.word	0xe000ed00
 8000474:	e000e100 	.word	0xe000e100

08000478 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b082      	sub	sp, #8
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	3b01      	subs	r3, #1
 8000484:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000488:	d301      	bcc.n	800048e <SysTick_Config+0x16>
 800048a:	2301      	movs	r3, #1
 800048c:	e00f      	b.n	80004ae <SysTick_Config+0x36>

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800048e:	4a0a      	ldr	r2, [pc, #40]	; (80004b8 <SysTick_Config+0x40>)
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	3b01      	subs	r3, #1
 8000494:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000496:	210f      	movs	r1, #15
 8000498:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800049c:	f7ff ffc2 	bl	8000424 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80004a0:	4b05      	ldr	r3, [pc, #20]	; (80004b8 <SysTick_Config+0x40>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80004a6:	4b04      	ldr	r3, [pc, #16]	; (80004b8 <SysTick_Config+0x40>)
 80004a8:	2207      	movs	r2, #7
 80004aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80004ac:	2300      	movs	r3, #0
}
 80004ae:	4618      	mov	r0, r3
 80004b0:	3708      	adds	r7, #8
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bd80      	pop	{r7, pc}
 80004b6:	bf00      	nop
 80004b8:	e000e010 	.word	0xe000e010

080004bc <SysTick_Handler>:

uint32_t delay_counter = 0;


void SysTick_Handler()
{
 80004bc:	b480      	push	{r7}
 80004be:	af00      	add	r7, sp, #0
  if (delay_counter)
 80004c0:	4b06      	ldr	r3, [pc, #24]	; (80004dc <SysTick_Handler+0x20>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d004      	beq.n	80004d2 <SysTick_Handler+0x16>
  {
    delay_counter--;
 80004c8:	4b04      	ldr	r3, [pc, #16]	; (80004dc <SysTick_Handler+0x20>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	3b01      	subs	r3, #1
 80004ce:	4a03      	ldr	r2, [pc, #12]	; (80004dc <SysTick_Handler+0x20>)
 80004d0:	6013      	str	r3, [r2, #0]
  }
}
 80004d2:	bf00      	nop
 80004d4:	46bd      	mov	sp, r7
 80004d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004da:	4770      	bx	lr
 80004dc:	20000034 	.word	0x20000034

080004e0 <delay>:


void delay(uint32_t ms)
{
 80004e0:	b480      	push	{r7}
 80004e2:	b083      	sub	sp, #12
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
  delay_counter = ms;
 80004e8:	4a06      	ldr	r2, [pc, #24]	; (8000504 <delay+0x24>)
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	6013      	str	r3, [r2, #0]
  while (delay_counter)
 80004ee:	bf00      	nop
 80004f0:	4b04      	ldr	r3, [pc, #16]	; (8000504 <delay+0x24>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d1fb      	bne.n	80004f0 <delay+0x10>
  {
  }
}
 80004f8:	bf00      	nop
 80004fa:	370c      	adds	r7, #12
 80004fc:	46bd      	mov	sp, r7
 80004fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000502:	4770      	bx	lr
 8000504:	20000034 	.word	0x20000034

08000508 <setup>:



void setup()
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 800050c:	4a0f      	ldr	r2, [pc, #60]	; (800054c <setup+0x44>)
 800050e:	4b0f      	ldr	r3, [pc, #60]	; (800054c <setup+0x44>)
 8000510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000512:	f043 0308 	orr.w	r3, r3, #8
 8000516:	6313      	str	r3, [r2, #48]	; 0x30
  GPIOD->MODER |= GPIO_MODER_MODER15_0 | GPIO_MODER_MODER14_0 | GPIO_MODER_MODER13_0 | GPIO_MODER_MODER12_0;
 8000518:	4a0d      	ldr	r2, [pc, #52]	; (8000550 <setup+0x48>)
 800051a:	4b0d      	ldr	r3, [pc, #52]	; (8000550 <setup+0x48>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	f043 43aa 	orr.w	r3, r3, #1426063360	; 0x55000000
 8000522:	6013      	str	r3, [r2, #0]
  GPIOD->OTYPER = 0;
 8000524:	4b0a      	ldr	r3, [pc, #40]	; (8000550 <setup+0x48>)
 8000526:	2200      	movs	r2, #0
 8000528:	605a      	str	r2, [r3, #4]
  GPIOD->OSPEEDR = 0;
 800052a:	4b09      	ldr	r3, [pc, #36]	; (8000550 <setup+0x48>)
 800052c:	2200      	movs	r2, #0
 800052e:	609a      	str	r2, [r3, #8]
  SystemCoreClockUpdate();
 8000530:	f7ff fe80 	bl	8000234 <SystemCoreClockUpdate>
  SysTick_Config(SystemCoreClock/1000);
 8000534:	4b07      	ldr	r3, [pc, #28]	; (8000554 <setup+0x4c>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	4a07      	ldr	r2, [pc, #28]	; (8000558 <setup+0x50>)
 800053a:	fba2 2303 	umull	r2, r3, r2, r3
 800053e:	099b      	lsrs	r3, r3, #6
 8000540:	4618      	mov	r0, r3
 8000542:	f7ff ff99 	bl	8000478 <SysTick_Config>
}
 8000546:	bf00      	nop
 8000548:	bd80      	pop	{r7, pc}
 800054a:	bf00      	nop
 800054c:	40023800 	.word	0x40023800
 8000550:	40020c00 	.word	0x40020c00
 8000554:	20000004 	.word	0x20000004
 8000558:	10624dd3 	.word	0x10624dd3

0800055c <blink>:


void blink()
{
 800055c:	b580      	push	{r7, lr}
 800055e:	af00      	add	r7, sp, #0
  GPIOD->BSRR |= GPIO_BSRR_BS_13;
 8000560:	4a0a      	ldr	r2, [pc, #40]	; (800058c <blink+0x30>)
 8000562:	4b0a      	ldr	r3, [pc, #40]	; (800058c <blink+0x30>)
 8000564:	699b      	ldr	r3, [r3, #24]
 8000566:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800056a:	6193      	str	r3, [r2, #24]
  delay(1000);
 800056c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000570:	f7ff ffb6 	bl	80004e0 <delay>
  GPIOD->BSRR |= GPIO_BSRR_BR_13;
 8000574:	4a05      	ldr	r2, [pc, #20]	; (800058c <blink+0x30>)
 8000576:	4b05      	ldr	r3, [pc, #20]	; (800058c <blink+0x30>)
 8000578:	699b      	ldr	r3, [r3, #24]
 800057a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800057e:	6193      	str	r3, [r2, #24]
  delay(1000);
 8000580:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000584:	f7ff ffac 	bl	80004e0 <delay>
}
 8000588:	bf00      	nop
 800058a:	bd80      	pop	{r7, pc}
 800058c:	40020c00 	.word	0x40020c00

08000590 <main>:


int main()
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  setup();
 8000594:	f7ff ffb8 	bl	8000508 <setup>
  while (1)
  {
  blink();
 8000598:	f7ff ffe0 	bl	800055c <blink>
 800059c:	e7fc      	b.n	8000598 <main+0x8>
 800059e:	bf00      	nop
 80005a0:	08000674 	.word	0x08000674
 80005a4:	20000000 	.word	0x20000000
 80005a8:	20000018 	.word	0x20000018
 80005ac:	20000018 	.word	0x20000018
 80005b0:	20000038 	.word	0x20000038

080005b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80005b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005ec <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80005b8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80005ba:	e003      	b.n	80005c4 <LoopCopyDataInit>

080005bc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80005bc:	4b0c      	ldr	r3, [pc, #48]	; (80005f0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80005be:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80005c0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80005c2:	3104      	adds	r1, #4

080005c4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80005c4:	480b      	ldr	r0, [pc, #44]	; (80005f4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80005c6:	4b0c      	ldr	r3, [pc, #48]	; (80005f8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80005c8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80005ca:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80005cc:	d3f6      	bcc.n	80005bc <CopyDataInit>
  ldr  r2, =_sbss
 80005ce:	4a0b      	ldr	r2, [pc, #44]	; (80005fc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80005d0:	e002      	b.n	80005d8 <LoopFillZerobss>

080005d2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80005d2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80005d4:	f842 3b04 	str.w	r3, [r2], #4

080005d8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80005d8:	4b09      	ldr	r3, [pc, #36]	; (8000600 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80005da:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80005dc:	d3f9      	bcc.n	80005d2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80005de:	f7ff fdf3 	bl	80001c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005e2:	f000 f811 	bl	8000608 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80005e6:	f7ff ffd3 	bl	8000590 <main>
  bx  lr    
 80005ea:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80005ec:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80005f0:	08000674 	.word	0x08000674
  ldr  r0, =_sdata
 80005f4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80005f8:	20000018 	.word	0x20000018
  ldr  r2, =_sbss
 80005fc:	20000018 	.word	0x20000018
  ldr  r3, = _ebss
 8000600:	20000038 	.word	0x20000038

08000604 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000604:	e7fe      	b.n	8000604 <ADC_IRQHandler>
	...

08000608 <__libc_init_array>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	4e0d      	ldr	r6, [pc, #52]	; (8000640 <__libc_init_array+0x38>)
 800060c:	4c0d      	ldr	r4, [pc, #52]	; (8000644 <__libc_init_array+0x3c>)
 800060e:	1ba4      	subs	r4, r4, r6
 8000610:	10a4      	asrs	r4, r4, #2
 8000612:	2500      	movs	r5, #0
 8000614:	42a5      	cmp	r5, r4
 8000616:	d109      	bne.n	800062c <__libc_init_array+0x24>
 8000618:	4e0b      	ldr	r6, [pc, #44]	; (8000648 <__libc_init_array+0x40>)
 800061a:	4c0c      	ldr	r4, [pc, #48]	; (800064c <__libc_init_array+0x44>)
 800061c:	f000 f81a 	bl	8000654 <_init>
 8000620:	1ba4      	subs	r4, r4, r6
 8000622:	10a4      	asrs	r4, r4, #2
 8000624:	2500      	movs	r5, #0
 8000626:	42a5      	cmp	r5, r4
 8000628:	d105      	bne.n	8000636 <__libc_init_array+0x2e>
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000630:	4798      	blx	r3
 8000632:	3501      	adds	r5, #1
 8000634:	e7ee      	b.n	8000614 <__libc_init_array+0xc>
 8000636:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800063a:	4798      	blx	r3
 800063c:	3501      	adds	r5, #1
 800063e:	e7f2      	b.n	8000626 <__libc_init_array+0x1e>
 8000640:	0800066c 	.word	0x0800066c
 8000644:	0800066c 	.word	0x0800066c
 8000648:	0800066c 	.word	0x0800066c
 800064c:	08000670 	.word	0x08000670

08000650 <__EH_FRAME_BEGIN__>:
 8000650:	00000000                                ....

08000654 <_init>:
 8000654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000656:	bf00      	nop
 8000658:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800065a:	bc08      	pop	{r3}
 800065c:	469e      	mov	lr, r3
 800065e:	4770      	bx	lr

08000660 <_fini>:
 8000660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000662:	bf00      	nop
 8000664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000666:	bc08      	pop	{r3}
 8000668:	469e      	mov	lr, r3
 800066a:	4770      	bx	lr
